#include "CJpegSample.h"

#define JpegScanDataCh1_Width 48
#define JpegScanDataCh2_Width 64

#define JpegScanDataCh1_Height 32
#define JpegScanDataCh2_Height 48

#define JpegScanDataCh1_Len 32
#define JpegScanDataCh2_Len 56

std::vector<uint8_t> CJpegSample::JpegScanDataCh1A =
{
    0xf8u, 0xbeu, 0x8au, 0x28u, 0xafu, 0xe5u, 0x33u, 0xfdu,
    0xfcu, 0x0au, 0x28u, 0xa2u, 0x80u, 0x0au, 0x28u, 0xa2u,
    0x80u, 0x0au, 0x28u, 0xa2u, 0x80u, 0x0au, 0x28u, 0xa2u,
    0x80u, 0x0au, 0x28u, 0xa2u, 0x80u, 0x3fu, 0xffu, 0xd9u
};

std::vector<uint8_t> CJpegSample::JpegScanDataCh1B =
{
    0xf5u, 0x8au, 0x28u, 0xa2u, 0xbfu, 0xcau, 0xf3u, 0xfcu,
    0x53u, 0x0au, 0x28u, 0xa2u, 0x80u, 0x0au, 0x28u, 0xa2u,
    0x80u, 0x0au, 0x28u, 0xa2u, 0x80u, 0x0au, 0x28u, 0xa2u,
    0x80u, 0x0au, 0x28u, 0xa2u, 0x80u, 0x3fu, 0xffu, 0xd9u
};

std::vector<uint8_t> CJpegSample::JpegScanDataCh2A =
{
    0xf8u, 0xbeu, 0x8au, 0x28u, 0xafu, 0xe5u, 0x33u, 0xfdu, 
    0xfcu, 0x0au, 0x28u, 0xa2u, 0x80u, 0x0au, 0x28u, 0xa2u, 
    0x80u, 0x0au, 0x28u, 0xa2u, 0x80u, 0x0au, 0x28u, 0xa2u, 
    0x80u, 0x0au, 0x28u, 0xa2u, 0x80u, 0x0au, 0x28u, 0xa2u, 
    0x80u, 0x0au, 0x28u, 0xa2u, 0x80u, 0x0au, 0x28u, 0xa2u, 
    0x80u, 0x0au, 0x28u, 0xa2u, 0x80u, 0x0au, 0x28u, 0xa2u, 
    0x80u, 0x0au, 0x28u, 0xa2u, 0x80u, 0x3fu, 0xffu, 0xd9u            
};

std::vector<uint8_t> CJpegSample::JpegScanDataCh2B =
{
    0xf5u, 0x8au, 0x28u, 0xa2u, 0xbfu, 0xcau, 0xf3u, 0xfcu,
    0x53u, 0x0au, 0x28u, 0xa2u, 0x80u, 0x0au, 0x28u, 0xa2u,
    0x80u, 0x0au, 0x28u, 0xa2u, 0x80u, 0x0au, 0x28u, 0xa2u,
    0x80u, 0x0au, 0x28u, 0xa2u, 0x80u, 0x0au, 0x28u, 0xa2u,
    0x80u, 0x0au, 0x28u, 0xa2u, 0x80u, 0x0au, 0x28u, 0xa2u,
    0x80u, 0x0au, 0x28u, 0xa2u, 0x80u, 0x0au, 0x28u, 0xa2u,
    0x80u, 0x0au, 0x28u, 0xa2u, 0x80u, 0x3fu, 0xffu, 0xd9u
};

CJpegSample::CJpegSample(uint8_t channelId) :
    bPeriodically{ false },
    uChannelId{ channelId }
{

}

CJpegSample::~CJpegSample() = default;

uint16_t CJpegSample::getImageWidth() const
{
    return (0 == uChannelId) ? JpegScanDataCh1_Width : JpegScanDataCh2_Width;
}

uint16_t CJpegSample::getImageHeight() const
{
    return (0 == uChannelId) ? JpegScanDataCh1_Height : JpegScanDataCh2_Height;
}

std::vector<uint8_t>& CJpegSample::getImageVector()
{
    if (0 == uChannelId)
    {
        sampleVector = (bPeriodically) ? JpegScanDataCh1A : JpegScanDataCh1B;
    }
    else
    {
        sampleVector = (bPeriodically) ? JpegScanDataCh2A : JpegScanDataCh2B;
    }
    bPeriodically = !bPeriodically;
    return sampleVector;
}

const uint8_t* CJpegSample::getImagePtr() const
{
    const uint8_t* imagePtr = NULL;
    bool* periodicallyPtr = (bool*)&bPeriodically;
    if (0 == uChannelId)
    {
        imagePtr = (bPeriodically) ? JpegScanDataCh1A.data() : JpegScanDataCh1B.data();
    }
    else
    {
        imagePtr = (bPeriodically) ? JpegScanDataCh2A.data() : JpegScanDataCh2B.data();
    }
    *periodicallyPtr = !bPeriodically;
    return imagePtr;
}

uint16_t CJpegSample::getImageSize() const
{
    return (0 == uChannelId) ? JpegScanDataCh1_Len : JpegScanDataCh2_Len;
}
